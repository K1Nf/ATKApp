import React, { useState } from 'react';
import "../components/EventForm.css";
import toastr from 'toastr';
import 'toastr/build/toastr.min.css';

const Login = () => {
  const [organizationId, setOrganizationId] = useState('');
  const [password, setPassword] = useState('');

  // üîß –ó–∞–≥–ª—É—à–∫–∞: —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π (–≤ –±—É–¥—É—â–µ–º –ø—Ä–∏–¥—ë—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞)
  const organizations = [
    { id: 'org1', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞' },
    { id: 'org2', name: '–®–∫–æ–ª–∞ ‚Ññ12' },
    { id: 'org3', name: '–¶–µ–Ω—Ç—Ä –º–æ–ª–æ–¥—ë–∂–∏' },
    { id: 'org4', name: '–ö—Ä–∞–µ–≤–æ–π —Ç–µ–∞—Ç—Ä' },
    { id: 'org5', name: '–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –Æ–ì–£' },
  ];

  // ‚ùó –í–∫–ª—é—á–∏—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ API
  /*
  useEffect(() => {
    const fetchOrganizations = async () => {
      try {
        const response = await fetch('/api/ref/organizations');
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π');
        const data = await response.json();
        setOrganizations(data);
      } catch (err) {
        toastr.error(err.message, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
      }
    };
    fetchOrganizations();
  }, []);
  */

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!organizationId || !password.trim()) {
      toastr.error('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å', '–û—à–∏–±–∫–∞');
      return;
    }

    if (password.length < 4) {
      toastr.error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞', '–û—à–∏–±–∫–∞');
      return;
    }

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ organizationId, password })
      });

      if (!response.ok) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞');
      }

      const data = await response.json();
      localStorage.setItem('token', data.token);
      toastr.success('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!', '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å');
      window.location.href = '/events';
    } catch (err) {
      toastr.error(err.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', '–û—à–∏–±–∫–∞');
    }
  };

  return (
    <div className="login-page">
      <div className="login-card">
        <div className="login-image">
          <video autoPlay muted loop playsInline>
            <source src="/images/fon.mp4" type="video/mp4" />
            –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
          </video>
        </div>
        <form className="login-form" onSubmit={handleSubmit}>
          <h2>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>

          <label htmlFor="organization">–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</label>
          <select
            id="organization"
            value={organizationId}
            onChange={(e) => setOrganizationId(e.target.value)}
          >
            <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é --</option>
            {organizations.map((org) => (
              <option key={org.id} value={org.id}>
                {org.name}
              </option>
            ))}
          </select>

          <input
            type="password"
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />

          <div className="actions">
            <button type="submit" className="primary-btn">–í–æ–π—Ç–∏</button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Login;
