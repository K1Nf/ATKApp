// <auto-generated />
using System;
using ATKApplication.Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ATKApplication.Infrastructure.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ATKApplication.Domain.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Audience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Audiences");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Concourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Concourses");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Actor")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("ThemeId");

                    b.ToTable("EventsBase", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasGuestionnaire")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasInternet")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasInterview")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOpros")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOther")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Finance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int?>("GranteBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("MunicipalBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("OtherBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionalBudget")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Finances");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.InterAgencyCooperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CoOpOrganiation")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("InterAgencyCooperations");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.MediaLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("MediaLinks");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6f318c5e-5800-4a35-b73a-1d66332427ce"),
                            Municipality = "Khanty_mansiysk",
                            Name = "khanty_mansiysk_dep_culture",
                            Password = "$2a$11$S6qUfm6Ebe59gsEFglyZG.62YLlXmbfV2UQVGZAsC2QCFgAOLb.iy",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f9ed09be-2067-4915-9c56-b8d829089ec4"),
                            Municipality = "Khanty_mansiysk",
                            Name = "khanty_mansiysk_dep_education",
                            Password = "$2a$11$WiBuwZvfbr5VYT58dxFgmeDWaHHs9TAFb5SAzOR7RMIPNQCzNRVi.",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("24154842-4b88-4e32-b1b1-55bca1328187"),
                            Municipality = "Khanty_mansiysk",
                            Name = "khanty_mansiysk_dep_young",
                            Password = "$2a$11$4TGXIGVJeAFQZrrS16Pt/O7mz0LE0X8xc6gnnRYlk5s1iOiNYCOfO",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("87f2e33b-5fec-4304-807f-fff592846ea7"),
                            Municipality = "Khanty_mansiysk",
                            Name = "khanty_mansiysk_dep_sport",
                            Password = "$2a$11$BaqJBaP/80oqNbHfrKFl7.Ckxh7yEJVOQq8I.BISsowXZBeXA.UM2",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4ac4c21b-33d6-4770-9979-ae3339d9dc27"),
                            Municipality = "Surgut",
                            Name = "surgut_dep_culture",
                            Password = "$2a$11$VK475lPT9irjskZP9pjB7OjCSCOKCC8tQscUHDDi3tpvxDw9rmAkO",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fe3f5500-8432-41cb-80b7-24098231b455"),
                            Municipality = "Surgut",
                            Name = "surgut_dep_education",
                            Password = "$2a$11$Xol8Cj8oUI.GVu5VTZ9UPePyA1ZF7gB06j9rfkNiFeu2b.r6pgUJe",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6855f310-60e6-4102-8e76-579bb6804a84"),
                            Municipality = "Surgut",
                            Name = "surgut_dep_young",
                            Password = "$2a$11$fOaqISL6G3Op73nrA4uwMeedz1fbKPVlMNqJgjBAmZp.A6a7eP/46",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("899178e2-fdaf-4ed1-ba58-ec53f443956e"),
                            Municipality = "Surgut",
                            Name = "surgut_dep_sport",
                            Password = "$2a$11$ImjyHGzG950o3Azw2dD80eIWWZdrZo3yu1GxfjpfzoqAy9aEy684K",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fc858a1f-760c-4e55-815e-b51a8f2e6997"),
                            Municipality = "Nefteyugansk",
                            Name = "nefteyugansk_dep_culture",
                            Password = "$2a$11$ofrP6zCXwuKf6GsroIaTFeeeBVJQlwFWA7EXP2WWpZnd12PnzM6t2",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("dcdc2b4c-7fc5-4422-ba42-9d302adec76f"),
                            Municipality = "Nefteyugansk",
                            Name = "nefteyugansk_dep_education",
                            Password = "$2a$11$GsgmFnKCwaZpra3f8BufYe313RA9RsP9iZdqQYhLHfC1nLbKdgfPK",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1ee4b89f-67ed-43e5-8772-da74ca83ab41"),
                            Municipality = "Nefteyugansk",
                            Name = "nefteyugansk_dep_young",
                            Password = "$2a$11$RfRtpjbsu3li/z/Tx8nOWOoJhv2CFAQxCV0OfKv.Y/qH/3h98y0rq",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("010d3e4b-13ca-44de-9c5b-c711de58cb23"),
                            Municipality = "Nefteyugansk",
                            Name = "nefteyugansk_dep_sport",
                            Password = "$2a$11$NMISmGQm26JkVgNVpgh6xOFsOjLWKC2O0L97TsYQJqio9lLkd65AW",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Support", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Receiver")
                        .HasColumnType("text");

                    b.Property<int>("SupportType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Form")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Violation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Blocked")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Order")
                        .HasColumnType("text");

                    b.Property<int>("Send")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Violations");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm1", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<string>("Decision")
                        .HasColumnType("text");

                    b.Property<string>("EqualToEqualDescription")
                        .HasColumnType("text");

                    b.Property<int?>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBestPractice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsValuable")
                        .HasColumnType("boolean");

                    b.Property<int?>("LevelType")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.ToTable("EventsForm1", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm2", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Participant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("EventsForm2", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm3", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<int>("BlockedTotal")
                        .HasColumnType("integer");

                    b.Property<int>("SendTotal")
                        .HasColumnType("integer");

                    b.ToTable("EventsForm3", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm4", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<bool>("DirectToNAC")
                        .HasColumnType("boolean");

                    b.Property<string>("DirectToSubjects")
                        .HasColumnType("text");

                    b.ToTable("EventsForm4", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Agreement", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm4", "Event")
                        .WithMany("Agreements")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Audience", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithMany("Audiences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Category", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", "Event")
                        .WithMany("Categories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Concourse", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithOne("Concourse")
                        .HasForeignKey("ATKApplication.Domain.Models.Concourse", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventBase", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.Organization", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("ATKApplication.Domain.Models.Theme", "Theme")
                        .WithMany("Events")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.FeedBack", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithOne("FeedBack")
                        .HasForeignKey("ATKApplication.Domain.Models.FeedBack", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Finance", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithOne("Finance")
                        .HasForeignKey("ATKApplication.Domain.Models.Finance", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.InterAgencyCooperation", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithMany("InterAgencyCooperations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.MediaLink", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", "Event")
                        .WithMany("MediaLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Support", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithMany("Supports")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Violation", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm3", "Event")
                        .WithMany("Violations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm1", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm1", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm2", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm2", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm3", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm3", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm4", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm4", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventBase", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("MediaLinks");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Organization", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Theme", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm1", b =>
                {
                    b.Navigation("Audiences");

                    b.Navigation("Concourse");

                    b.Navigation("FeedBack");

                    b.Navigation("Finance");

                    b.Navigation("InterAgencyCooperations");

                    b.Navigation("Supports");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm3", b =>
                {
                    b.Navigation("Violations");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm4", b =>
                {
                    b.Navigation("Agreements");
                });
#pragma warning restore 612, 618
        }
    }
}
