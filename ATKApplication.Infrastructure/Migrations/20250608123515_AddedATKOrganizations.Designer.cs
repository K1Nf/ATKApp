// <auto-generated />
using System;
using ATKApplication.Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ATKApplication.Infrastructure.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250608123515_AddedATKOrganizations")]
    partial class AddedATKOrganizations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ATKApplication.Domain.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Audience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Audiences");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Concourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Concourses");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Actor")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("ThemeId");

                    b.ToTable("EventsBase", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasGuestionnaire")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasInternet")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasInterview")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOpros")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOther")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Finance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int?>("GranteBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("MunicipalBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("OtherBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionalBudget")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Finances");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.InterAgencyCooperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CoOpOrganiation")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("InterAgencyCooperations");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.MediaLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("MediaLinks");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0d80d08-2ad3-4767-a36b-5d175cfcca13"),
                            Municipality = "noMunicipality",
                            Name = "atk_khmao",
                            Password = "$2a$11$TiL3mdpo9P/J3QJ0/xRP.eCacsH230pDcLmggbHd0fE9XO4WQDQMy",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b98b1f4f-e7e7-4680-a064-a96a09c22c51"),
                            Municipality = "Beloyarskiy_rayon",
                            Name = "atk_beloyarskiy_rayon",
                            Password = "$2a$11$0bm67HLZYNSrvi.nXPjH2Of8VMgV1a/NBhXBf4zlxnhK0Iv24OJIC",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3a9be765-2c39-4764-bc22-258e3f4790ee"),
                            Municipality = "Berezovskiy_rayon",
                            Name = "atk_berezovskiy_rayon",
                            Password = "$2a$11$vewgpgGOGAEZZh0s9y1JjOIj.dlLTKGLmKM4KVtKOrfIAbdwNUfjy",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4c9533ad-797d-4605-8f06-91a767900c4e"),
                            Municipality = "Condinskiy_rayon",
                            Name = "atk_condinskiy_rayon",
                            Password = "$2a$11$HeVy12JhZee23iSUQPexbulhJH2AwdH.FsfIIsVrHzxWiEsZSdzAC",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("74b49b1c-51ae-4758-a5bc-efe195816c35"),
                            Municipality = "Khanty_mansiysk",
                            Name = "atk_khanty_mansiysk",
                            Password = "$2a$11$iLJbQkdHXRx0chcWLd6RpO3/Hl4NiDAWWIKEccjJXzkSnfzmZwRXi",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3b180850-74c9-443e-9587-901c253ae74d"),
                            Municipality = "Khanty_mansiyskiy_rayon",
                            Name = "atk_khanty_mansiyskiy_rayon",
                            Password = "$2a$11$1W4IHr8a3CAMSHJRCveTA.ZUO8RdHmLYXUTEpsvESn6AtzW0nnLna",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("3f72b19f-d07f-4202-868a-017b45228425"),
                            Municipality = "Kogalym",
                            Name = "atk_kogalym",
                            Password = "$2a$11$q2prrt/bfbyKrZzFdgTJkuvlaWHGZTL1HOpbQ1OqFPUZ/RykmT0vO",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4ed57e40-af2c-4c02-8748-8d4920addb12"),
                            Municipality = "Langepas",
                            Name = "atk_langepas",
                            Password = "$2a$11$FKyek8k7vw6ca8K.bHGsvujRJj9d4P97gZ/YB3QiAWOxT3ubmmwoe",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("19d3ff34-0f45-4929-af4e-1cd1f51b2135"),
                            Municipality = "Megion",
                            Name = "atk_megion",
                            Password = "$2a$11$wCag9GfAnjvqewGwneDdV.HTzPCaJtajp/7L4r4wPTHhBGM.j.RUC",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c9631ada-6fd9-408b-af2c-e760453b7eb4"),
                            Municipality = "Nefteyugansk",
                            Name = "atk_nefteyugansk",
                            Password = "$2a$11$pMgGY8IcU1K0sDtVAYz37OYjdgq1.BvQTbDsf7sSvM.bLZXDjB6UO",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9dcaa498-6545-4848-bd91-17a58ac9e986"),
                            Municipality = "Nefteyuganskiy_rayon",
                            Name = "atk_nefteyuganskiy_rayon",
                            Password = "$2a$11$PCbR45FH6ZOqbnfenO7XReyOLblmz3tH48PTzPtwKgUPHKzH7p9CS",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9692819c-8ad9-4103-adcf-2437a783fbba"),
                            Municipality = "Nizhnevartovsk",
                            Name = "atk_nizhnevartovsk",
                            Password = "$2a$11$Wd8wkxxTWWij6/xj536A8uguajA/FNND08usMAP8u0hLBfgkWuiVC",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("bc4bd761-15a6-45ad-af81-e4602b171dad"),
                            Municipality = "Nizhnevartovskiy_rayon",
                            Name = "atk_nizhnevartovskiy_rayon",
                            Password = "$2a$11$yt21s1PT2m0GSIB7rwoUJ.XdXDrRYoZDf228j6wuMNscIoMdvAvwm",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("24005700-9409-40ba-9c81-03cce7c15c07"),
                            Municipality = "Nyagan",
                            Name = "atk_nyagan",
                            Password = "$2a$11$6HUrll00RTOp6OCRI0mS7uDi9X5VhD5efDYR9COqWjgJpsbX1cjJK",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f578684e-662a-45d3-80df-3c5e07b5d2b5"),
                            Municipality = "Oktyabrskiy_rayon",
                            Name = "atk_oktyabrskiy_rayon",
                            Password = "$2a$11$rj3sESQGKapfzCDzt1VJ..V/Ayu3Fl4EgJuKBUjSYWec50qSBKr7W",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1cab65e5-6616-4261-98ba-ce725ca89c60"),
                            Municipality = "Pokachi",
                            Name = "atk_pokachi",
                            Password = "$2a$11$iqvGMabteitJKlDz7dUITOgdtl8iIoYq3wJLPepWie3QrMC8QW.vO",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6fb47f93-45b1-4010-9201-105fc0dce893"),
                            Municipality = "Pyth_yach",
                            Name = "atk_pyth_yach",
                            Password = "$2a$11$ez27EwqCy01leZHps8mRQu6lDVWZPiSLV..43ca2se4HcAN0t4p/W",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("cceb6761-4ff6-4c89-91d6-2e62e46eab40"),
                            Municipality = "Raduzhnyi",
                            Name = "atk_raduzhnyi",
                            Password = "$2a$11$Z3u29QyZmAHzZihj9oLB9usdnHrwAH4wWYXSo8r7OCHjnFW9Re9.a",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("463a4829-8257-49b4-b292-7ceba8420aaf"),
                            Municipality = "Sovietskiy_rayon",
                            Name = "atk_sovietskiy_rayon",
                            Password = "$2a$11$B.qaHpZvUK.dV9VRvMn4eu8k0cLWponl5G.gX4E9B/mt.ix4NrNb.",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("04c63480-40f6-4b28-a783-d3e8522222f2"),
                            Municipality = "Surgut",
                            Name = "atk_surgut",
                            Password = "$2a$11$slw0Za.tXjFtFXDClQ31KOkwgqHngjxTWcLPkkeprFGvrt.JEi28C",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("da78d3f6-4df1-47e5-98ae-cd10959d54fb"),
                            Municipality = "Surgutskiy_rayon",
                            Name = "atk_surgutskiy_rayon",
                            Password = "$2a$11$EbNVcy3st.8HA0jd8/oKA.QZIi9XJ63RfW.nOpQ1nkYz/suja7Clq",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d6f75ecb-8c12-4b34-aa67-297b5a4ce71b"),
                            Municipality = "Urai",
                            Name = "atk_urai",
                            Password = "$2a$11$Qlssf8wBZ2dFT5jcrja3su94merfWiVH5Z4KYOmrPsFeWA/P61z6e",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("65d0a208-8e07-4012-b441-2b6a6fe6ac6f"),
                            Municipality = "Yugorsk",
                            Name = "atk_yugorsk",
                            Password = "$2a$11$r6sW/N7FhfSiOf/JxGNRFuW6Pza9.cx27fXaf4M1DGcGdkun62.Vy",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Support", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Receiver")
                        .HasColumnType("text");

                    b.Property<int>("SupportType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Form")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Violation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Blocked")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Order")
                        .HasColumnType("text");

                    b.Property<int>("Send")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Violations");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm1", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<string>("Decision")
                        .HasColumnType("text");

                    b.Property<string>("EqualToEqualDescription")
                        .HasColumnType("text");

                    b.Property<int?>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBestPractice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsValuable")
                        .HasColumnType("boolean");

                    b.Property<int?>("LevelType")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.ToTable("EventsForm1", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm2", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Participant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("EventsForm2", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm3", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<int>("BlockedTotal")
                        .HasColumnType("integer");

                    b.Property<int>("SendTotal")
                        .HasColumnType("integer");

                    b.ToTable("EventsForm3", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm4", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<bool>("DirectToNAC")
                        .HasColumnType("boolean");

                    b.Property<string>("DirectToSubjects")
                        .HasColumnType("text");

                    b.ToTable("EventsForm4", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Agreement", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm4", "Event")
                        .WithMany("Agreements")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Audience", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithMany("Audiences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Category", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", "Event")
                        .WithMany("Categories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Concourse", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithOne("Concourse")
                        .HasForeignKey("ATKApplication.Domain.Models.Concourse", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventBase", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.Organization", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ATKApplication.Domain.Models.Theme", "Theme")
                        .WithMany("Events")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.FeedBack", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithOne("FeedBack")
                        .HasForeignKey("ATKApplication.Domain.Models.FeedBack", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Finance", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithOne("Finance")
                        .HasForeignKey("ATKApplication.Domain.Models.Finance", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.InterAgencyCooperation", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithMany("InterAgencyCooperations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.MediaLink", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", "Event")
                        .WithMany("MediaLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Support", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithMany("Supports")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Violation", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm3", "Event")
                        .WithMany("Violations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm1", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm1", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm2", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm2", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm3", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm3", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm4", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm4", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventBase", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("MediaLinks");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Organization", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Theme", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm1", b =>
                {
                    b.Navigation("Audiences");

                    b.Navigation("Concourse");

                    b.Navigation("FeedBack");

                    b.Navigation("Finance");

                    b.Navigation("InterAgencyCooperations");

                    b.Navigation("Supports");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm3", b =>
                {
                    b.Navigation("Violations");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm4", b =>
                {
                    b.Navigation("Agreements");
                });
#pragma warning restore 612, 618
        }
    }
}
