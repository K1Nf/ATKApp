// <auto-generated />
using System;
using ATKApplication.Infrastructure.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ATKApplication.Infrastructure.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250608120637_Added4DepartmentsToKhM")]
    partial class Added4DepartmentsToKhM
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ATKApplication.Domain.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Audience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Audiences");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Concourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Concourses");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Actor")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("ThemeId");

                    b.ToTable("EventsBase", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasGuestionnaire")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasInternet")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasInterview")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOpros")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOther")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Finance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int?>("GranteBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("MunicipalBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("OtherBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionalBudget")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Finances");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.InterAgencyCooperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CoOpOrganiation")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("InterAgencyCooperations");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.MediaLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("MediaLinks");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98d16169-aec6-4821-b838-85968ba1192e"),
                            Municipality = "noMunicipality",
                            Name = "atk_khmao",
                            Password = "$2a$11$tTqR4AStpnEHvXhaop3//uIaFVFaR9V4osvIaYgwUmNRhk/Oge.F2",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("730eda47-9a25-44ab-b78e-4fe3e60de058"),
                            Municipality = "Beloyarskiy_rayon",
                            Name = "atk_beloyarskiy_rayon",
                            Password = "$2a$11$uJeyxp62bxfrW5Wqeitzz.mh1ahV3A7DE3h.2Ci9fSyi2jrPsj8/G",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f25aee54-8726-4af7-83e6-06748debd9fb"),
                            Municipality = "Berezovskiy_rayon",
                            Name = "atk_berezovskiy_rayon",
                            Password = "$2a$11$PCwwGQ4IWyreaEQjL9wK4OO55seLM7efimP0m.VHRMGM9w3FrTNxy",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("57b5522d-7777-4826-83cb-5fbad059f31c"),
                            Municipality = "Condinskiy_rayon",
                            Name = "atk_condinskiy_rayon",
                            Password = "$2a$11$/GHG8ho9d5ohJO0DJE4sKuDiGgFE25fi1gslAY8svNuS2PTrdm1nW",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9cb131f6-e751-430f-bff9-5725e69fb975"),
                            Municipality = "Khanty_mansiysk",
                            Name = "atk_khanty_mansiysk",
                            Password = "$2a$11$oKoehVAtMkcgBRrXObbmXuJWSbRFK8K3W2rVTzlEVpBzuqxK5pIlq",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("e97e047b-8bba-4858-8bc7-7d3e1ef879a1"),
                            Municipality = "Khanty_mansiyskiy_rayon",
                            Name = "atk_khanty_mansiyskiy_rayon",
                            Password = "$2a$11$yMyUDty6APJmaLBtB9KM6uNXG.xjqjpkcll64oQPlf6humIyJiJJi",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("5d537486-2d4e-479d-ad8c-67731eb381e4"),
                            Municipality = "Kogalym",
                            Name = "atk_kogalym",
                            Password = "$2a$11$DqMiYWQrPqrZbX.PWepKwOaoT.CkQzZBNsr4qphtblDgylKxRQ7Ne",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("927c6079-3130-46ea-a168-2c4362927ff4"),
                            Municipality = "Langepas",
                            Name = "atk_langepas",
                            Password = "$2a$11$vYYi2r/eY/cvIxwYNiJbx.bd0ZDQFUrr6iqDkRmJUbsndpDSBxRQe",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a8019561-3cfe-4326-b72b-d27a652fbf20"),
                            Municipality = "Megion",
                            Name = "atk_megion",
                            Password = "$2a$11$1sdQFdbFtdLGrhg102fOuOx0l.uI1wIhacSKLiBgZ3TEKagWIZuhS",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a59e3050-ec4a-46f2-a6e3-243dea47cc6b"),
                            Municipality = "Nefteyugansk",
                            Name = "atk_nefteyugansk",
                            Password = "$2a$11$kZW0crXo2SgGxg46pP4REeN5zM7RqX2rSCVMYX8DVMdFbRJxnwgh2",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f8f95e9b-1b07-468e-b72a-701431bd48e6"),
                            Municipality = "Nefteyuganskiy_rayon",
                            Name = "atk_nefteyuganskiy_rayon",
                            Password = "$2a$11$qhxOgRFtIAJDkHckhtrtZOSiyep/WOMQ57m9Qd0UAoHGsnWB4SlhK",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("8d5ccab9-69b0-46b4-ac1f-1ce95866e2df"),
                            Municipality = "Nizhnevartovsk",
                            Name = "atk_nizhnevartovsk",
                            Password = "$2a$11$pyR.tbnABcqnWcoc9KdUYOpB.Wuhjtf24yMJPRYUUk/8EkkrxXtnS",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("15579234-a515-4cb9-8a0c-b7ed5eb8ce41"),
                            Municipality = "Nizhnevartovskiy_rayon",
                            Name = "atk_nizhnevartovskiy_rayon",
                            Password = "$2a$11$wxsxKLge9/Ikdi9ZQ6VlxOTIUy/gMusKEPialFkgCFf4gLvEkrOE2",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("86d6ea84-6f58-4201-8e9a-5159bab09612"),
                            Municipality = "Nyagan",
                            Name = "atk_nyagan",
                            Password = "$2a$11$KgOYwpYrlBqRFanvbVSFOeS7s.mWKniiPzU9smzkpKFywQhtl0t56",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("f14b0ec2-0580-4a9e-b5f8-b0554e29ec33"),
                            Municipality = "Oktyabrskiy_rayon",
                            Name = "atk_oktyabrskiy_rayon",
                            Password = "$2a$11$zT0sraa2clkrQCH9.KRcKOWaLovO9DbAvI.KA0yXUaVpWjW8.djdG",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("9a61c105-92fd-4b8b-bd7e-87bdbb811281"),
                            Municipality = "Pokachi",
                            Name = "atk_pokachi",
                            Password = "$2a$11$RM1XGT1EOM/LK8aBdE6.kOdEn8UGjx.XDrq9WP9lAMcxM108JsaAa",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("1f507d40-fe24-499c-8df3-c43f610544ca"),
                            Municipality = "Pyth_yach",
                            Name = "atk_pyth_yach",
                            Password = "$2a$11$.ZKGpvqyRECJFHM7JR7GP.4tdvkflJv4X4l1e5WDhZ/qEP8MFhTh2",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("691df7fe-525e-4f2d-99a5-635ec2d782fd"),
                            Municipality = "Raduzhnyi",
                            Name = "atk_raduzhnyi",
                            Password = "$2a$11$p8Y9u3s.s84DVYpWOKyBDu1B31U2obL0RNibS3dr1JkjVdH/Cgidi",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2c63ca17-d56e-418d-9f04-89863b240ecd"),
                            Municipality = "Sovietskiy_rayon",
                            Name = "atk_sovietskiy_rayon",
                            Password = "$2a$11$tMg/gBhGfaJcLsQHeKw7t.CdsuTIKPck8us1SEZ2daoEpaTKuvRAy",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("80447420-65a9-4355-a811-6a21f0699930"),
                            Municipality = "Surgut",
                            Name = "atk_surgut",
                            Password = "$2a$11$VfJ2MA8v1FvPSLkQ6y92H./Oyjqc7iGQ7piXjKgx4Or6xPnGWMdpS",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("0faf9353-06d7-4d83-bb72-36cc77f5f9fc"),
                            Municipality = "Surgutskiy_rayon",
                            Name = "atk_surgutskiy_rayon",
                            Password = "$2a$11$YOendxtAs9vdta2c05NRC.b/WHmKDVbl6dT16zD.IRmtKHDeX6sqK",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("811ed12f-6d7b-4dd6-be5f-3abe06e71c64"),
                            Municipality = "Urai",
                            Name = "atk_urai",
                            Password = "$2a$11$YOkNng2XS/W5wlUqXu2kL.UMo6Ys/rhu0itAvZlgqjPlTgdkRVEhq",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("35ae5afe-4f81-41b7-85ac-d89e1c853f2d"),
                            Municipality = "Yugorsk",
                            Name = "atk_yugorsk",
                            Password = "$2a$11$.YR8wGTPP.OWQmlHR5HQCefCUVaL9AjOJ6j2ic6qlGfwN1lXT6.WW",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("44c63e81-9449-44be-bdf5-02a15e07df82"),
                            Municipality = "Khanty_mansiysk",
                            Name = "atk_surgut",
                            Password = "$2a$11$r7mx7JR27QNkNrFdIJC4MuXoRu0GFKZnt2S2tRww0vW3TSHx.QrrO",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("4dbe5794-f0cb-4ff7-905a-ff1fe08cf3f9"),
                            Municipality = "Khanty_mansiysk",
                            Name = "atk_khanty_mansiysk",
                            Password = "$2a$11$yBSJO99d7pgOyRJl8ds5AeLFx2IboIr7L3.8Ns7kYbgWE.hbbkbJG",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("11de291a-6a3b-462b-9b5c-bfd231f9152b"),
                            Municipality = "Khanty_mansiysk",
                            Name = "atk_urai",
                            Password = "$2a$11$Kr7XF4EezWHdG4rASUuYEuGlA5q7gK1mbShnCYTDAEHJOszPF4gJ2",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("61edd380-824b-4667-8268-754f9d438232"),
                            Municipality = "Khanty_mansiysk",
                            Name = "atk_yugorsk",
                            Password = "$2a$11$Wj9iI5h4HnLQfDL.rWvsUujO56HaElkn56ujgUPykyvZhmMhJfWyS",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Support", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Receiver")
                        .HasColumnType("text");

                    b.Property<int>("SupportType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Form")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Violation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Blocked")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Order")
                        .HasColumnType("text");

                    b.Property<int>("Send")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Violations");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm1", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<string>("Decision")
                        .HasColumnType("text");

                    b.Property<string>("EqualToEqualDescription")
                        .HasColumnType("text");

                    b.Property<int?>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBestPractice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsValuable")
                        .HasColumnType("boolean");

                    b.Property<int?>("LevelType")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.ToTable("EventsForm1", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm2", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Participant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("EventsForm2", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm3", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<int>("BlockedTotal")
                        .HasColumnType("integer");

                    b.Property<int>("SendTotal")
                        .HasColumnType("integer");

                    b.ToTable("EventsForm3", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm4", b =>
                {
                    b.HasBaseType("ATKApplication.Domain.Models.EventBase");

                    b.Property<bool>("DirectToNAC")
                        .HasColumnType("boolean");

                    b.Property<string>("DirectToSubjects")
                        .HasColumnType("text");

                    b.ToTable("EventsForm4", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Agreement", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm4", "Event")
                        .WithMany("Agreements")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Audience", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithMany("Audiences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Category", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", "Event")
                        .WithMany("Categories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Concourse", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithOne("Concourse")
                        .HasForeignKey("ATKApplication.Domain.Models.Concourse", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventBase", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.Organization", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ATKApplication.Domain.Models.Theme", "Theme")
                        .WithMany("Events")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.FeedBack", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithOne("FeedBack")
                        .HasForeignKey("ATKApplication.Domain.Models.FeedBack", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Finance", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithOne("Finance")
                        .HasForeignKey("ATKApplication.Domain.Models.Finance", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.InterAgencyCooperation", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithMany("InterAgencyCooperations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.MediaLink", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", "Event")
                        .WithMany("MediaLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Support", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm1", "Event")
                        .WithMany("Supports")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Violation", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventForm3", "Event")
                        .WithMany("Violations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm1", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm1", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm2", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm2", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm3", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm3", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm4", b =>
                {
                    b.HasOne("ATKApplication.Domain.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Domain.Models.EventForm4", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventBase", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("MediaLinks");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Organization", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.Theme", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm1", b =>
                {
                    b.Navigation("Audiences");

                    b.Navigation("Concourse");

                    b.Navigation("FeedBack");

                    b.Navigation("Finance");

                    b.Navigation("InterAgencyCooperations");

                    b.Navigation("Supports");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm3", b =>
                {
                    b.Navigation("Violations");
                });

            modelBuilder.Entity("ATKApplication.Domain.Models.EventForm4", b =>
                {
                    b.Navigation("Agreements");
                });
#pragma warning restore 612, 618
        }
    }
}
