// <auto-generated />
using System;
using ATKApplication.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ATKApplication.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20250607084734_CreatedSomeOrganizations")]
    partial class CreatedSomeOrganizations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ATKApplication.Models.Agreement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Organization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Agreements");
                });

            modelBuilder.Entity("ATKApplication.Models.Audience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Audiences");
                });

            modelBuilder.Entity("ATKApplication.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ATKApplication.Models.Concourse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Concourses");
                });

            modelBuilder.Entity("ATKApplication.Models.EventBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Actor")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OrganizerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThemeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("ThemeId");

                    b.ToTable("EventsBase", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ATKApplication.Models.FeedBack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasGuestionnaire")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasInternet")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasInterview")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOpros")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasOther")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("FeedBacks");
                });

            modelBuilder.Entity("ATKApplication.Models.Finance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int?>("GranteBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("MunicipalBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("OtherBudget")
                        .HasColumnType("integer");

                    b.Property<int?>("RegionalBudget")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Finances");
                });

            modelBuilder.Entity("ATKApplication.Models.InterAgencyCooperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CoOpOrganiation")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Organization")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("InterAgencyCooperations");
                });

            modelBuilder.Entity("ATKApplication.Models.MediaLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("MediaLinks");
                });

            modelBuilder.Entity("ATKApplication.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Municipality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4af6717f-6b11-463e-90ea-d53d7b370ed8"),
                            Municipality = "noMunicipality",
                            Name = "atk_khmao",
                            Password = "$2a$11$9WjBSF5r.7lkG8n214Az7OAcqWoq52HJ7qyScbE7gQfWMUzEVmbVi",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("062533d7-3ae2-4a0e-aeba-22f2bb780869"),
                            Municipality = "noMunicipality",
                            Name = "atk_beloyarskiy_rayon",
                            Password = "$2a$11$FIDoI11YlVrwMLECTJortezjWL0h8ghqEb6/7ywTCTVt8ptYBsM0q",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("b1c97216-803f-43d7-b9b3-6eb29910817c"),
                            Municipality = "Berezovskiy_rayon",
                            Name = "atk_berezovskiy_rayon",
                            Password = "$2a$11$QAAoGntTQtDrdLndtyHtPeV.b1lO2ID5UE3UGGGOGNbusB.gDj2Ei",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("c388d5a9-70a2-4f30-a62c-ef39f8747a95"),
                            Municipality = "Condinskiy_rayon",
                            Name = "atk_condinskiy_rayon",
                            Password = "$2a$11$W4vOBtx2NjZPooVQzdZs/.QNlJD9VAMDuMASbJnkwdtsb3sqV2J6O",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("cb89e189-fd3e-4ec8-a5f2-9c62fc639c65"),
                            Municipality = "Khanty_mansiysk",
                            Name = "atk_khanty_mansiysk",
                            Password = "$2a$11$KHHNIcd8JT0tCyZb22PSI.sMgvncMnRb0fsHC9PoKaVEELyvLiJuq",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("a1cf85da-df78-46fa-9602-9dc410696c62"),
                            Municipality = "Khanty_mansiyskiy_rayon",
                            Name = "atk_khanty_mansiyskiy_rayon",
                            Password = "$2a$11$yb3Y4i6LBWHl3odoG5ApaeU8GgsTfIg6e9kQ1U4WOYZSho7nAOgI.",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("bc0368c9-ebb6-47be-8a63-0cd37194c15b"),
                            Municipality = "Kogalym",
                            Name = "atk_kogalym",
                            Password = "$2a$11$cTbg.xa4Tc4k/J3ju1L0ZOimgsux1431RkQKt27VsIgRSmKq85bde",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("26dffba8-ea9a-42d4-94a1-0ee6a84c1ba4"),
                            Municipality = "Langepas",
                            Name = "atk_langepas",
                            Password = "$2a$11$DLolohS7wFI/rcAesoSbSu0ELR/WzCQjzDHncygk7ibKfRVAtTrNS",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("bd8bc538-3257-49e6-aedd-a49e97306e91"),
                            Municipality = "Megion",
                            Name = "atk_megion",
                            Password = "$2a$11$hK2ya/4eYnHRCtdFihXhhOL7SjPwzhuM0Kj.30fkQlZbillqWZEdi",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("db620bb9-ee2b-4f73-a6d6-361449b140ce"),
                            Municipality = "Nefteyugansk",
                            Name = "atk_nefteyugansk",
                            Password = "$2a$11$vSSkpO.K3hMphcMQieu8lOIfLTF4YHSklemFf5azj9dPyBirzdtLW",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ab3652da-05d6-47e1-9580-89e32055eaec"),
                            Municipality = "Nefteyuganskiy_rayon",
                            Name = "atk_nefteyuganskiy_rayon",
                            Password = "$2a$11$T0Bki4k.snJHXoLsr1h2X.Ua30XtZyBNKDQExDlc2hjnreD3XcSjO",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("7e0024fb-67d4-4e9b-bcbe-036c1fcdc940"),
                            Municipality = "Nizhnevartovsk",
                            Name = "atk_nizhnevartovsk",
                            Password = "$2a$11$mRZ.TCsb.iFfx6RI7.07i.lzA.JwnAJlPkNWvrQuapXaJ3shvJBeS",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("17cd8a76-05f4-46a5-977e-a7866293a6fd"),
                            Municipality = "Nizhnevartovskiy_rayon",
                            Name = "atk_nizhnevartovskiy_rayon",
                            Password = "$2a$11$goKhqAtBrIx.JhT/dDVEcOgrdG8szXApDIHwgz7JDq34wr2xdvsSe",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6916e17f-3fc1-4f0b-b602-843b43c4b913"),
                            Municipality = "Nyagan",
                            Name = "atk_nyagan",
                            Password = "$2a$11$i9cfjXU90JSSUj7tPzeG7.rBnGwK59r5i8eZ.mKqmHXhYRJcWRYeW",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("59b14994-a37f-4d17-a57d-b00bfb1d7831"),
                            Municipality = "Oktyabrskiy_rayon",
                            Name = "atk_oktyabrskiy_rayon",
                            Password = "$2a$11$SMdmVo6Yy0753UvAPPMTMeGyCz.hI4FyZI.Yg58oc7Nk7A4kfDhvG",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6c65dc07-d247-4698-b754-7db0cb0d65e5"),
                            Municipality = "Pokachi",
                            Name = "atk_pokachi",
                            Password = "$2a$11$E6IfvrOGBQ/nCo2V8kO0fejVYIOfCy2VGmRdG.eZ6eRNXFU.MFPVi",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("af85000e-4a6a-4989-8874-2b2cd2a0a7e6"),
                            Municipality = "Pyth_yach",
                            Name = "atk_pyth_yach",
                            Password = "$2a$11$K4oZHAC7kiCNmu1MnWrBXuJmutIzK87A4i65xTUMJAxmHKPBq4iEG",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("fd756369-b334-41bb-b7b8-410b91987bf0"),
                            Municipality = "Raduzhnyi",
                            Name = "atk_raduzhnyi",
                            Password = "$2a$11$I64nfsD7DYsVNqC91GAAx.SAuEnbBNSnoP98rvbcwBBDjpxQqvRJa",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("d4afccd9-4370-4c0c-880d-0fb9578cf6ac"),
                            Municipality = "Sovietskiy_rayon",
                            Name = "atk_sovietskiy_rayon",
                            Password = "$2a$11$p8nzAFIlOftI98.UwCVykeVpLeurbuRpvBNYilrPIN07hS22X687G",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("8fbc54b4-f114-4d99-9009-298025bdca85"),
                            Municipality = "Surgut",
                            Name = "atk_surgut",
                            Password = "$2a$11$wJvobiQSvZZuzUIdp/EwPOa6w1/ednuQkLvjp41M3olUIBQMTSsUW",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("6235294e-ae26-483e-bfb2-ab3279358cde"),
                            Municipality = "Surgutskiy_rayon",
                            Name = "atk_surgutskiy_rayon",
                            Password = "$2a$11$0nnWMGX9pkYi5JN1S9z1WeyVzr8q2zcX7O2YMA9KJ/RMelKofSTFa",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("ed9c870d-8003-44c4-8c5e-e02b01f65815"),
                            Municipality = "Urai",
                            Name = "atk_urai",
                            Password = "$2a$11$.R.RIlfiRryoOSBpfwv4F.31lT1Gfj8O96w/lOVp.MHjPqEIRZviS",
                            Rating = 0
                        },
                        new
                        {
                            Id = new Guid("2a80eaf9-2243-42b5-b203-a49072795feb"),
                            Municipality = "Yugorsk",
                            Name = "atk_yugorsk",
                            Password = "$2a$11$McWy.lsVGQ8jv4GRHPOQt.uxWutpsCuYKJrCIYMjMRtbK6TvuWdr.",
                            Rating = 0
                        });
                });

            modelBuilder.Entity("ATKApplication.Models.Support", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Receiver")
                        .HasColumnType("text");

                    b.Property<int>("SupportType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Supports");
                });

            modelBuilder.Entity("ATKApplication.Models.Theme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Form")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("ATKApplication.Models.Violation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Blocked")
                        .HasColumnType("integer");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Order")
                        .HasColumnType("text");

                    b.Property<int>("Send")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Violations");
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm1", b =>
                {
                    b.HasBaseType("ATKApplication.Models.EventBase");

                    b.Property<string>("Decision")
                        .HasColumnType("text");

                    b.Property<string>("EqualToEqualDescription")
                        .HasColumnType("text");

                    b.Property<int?>("EventType")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsBestPractice")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsValuable")
                        .HasColumnType("boolean");

                    b.Property<int?>("LevelType")
                        .HasColumnType("integer");

                    b.Property<string>("Result")
                        .HasColumnType("text");

                    b.ToTable("EventsForm1", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm2", b =>
                {
                    b.HasBaseType("ATKApplication.Models.EventBase");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Participant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("EventsForm2", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm3", b =>
                {
                    b.HasBaseType("ATKApplication.Models.EventBase");

                    b.Property<int>("BlockedTotal")
                        .HasColumnType("integer");

                    b.Property<int>("SendTotal")
                        .HasColumnType("integer");

                    b.ToTable("EventsForm3", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm4", b =>
                {
                    b.HasBaseType("ATKApplication.Models.EventBase");

                    b.Property<bool>("DirectToNAC")
                        .HasColumnType("boolean");

                    b.Property<string>("DirectToSubjects")
                        .HasColumnType("text");

                    b.ToTable("EventsForm4", (string)null);
                });

            modelBuilder.Entity("ATKApplication.Models.Agreement", b =>
                {
                    b.HasOne("ATKApplication.Models.EventForm4", "Event")
                        .WithMany("Agreements")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.Audience", b =>
                {
                    b.HasOne("ATKApplication.Models.EventForm1", "Event")
                        .WithMany("Audiences")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.Category", b =>
                {
                    b.HasOne("ATKApplication.Models.EventBase", "Event")
                        .WithMany("Categories")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.Concourse", b =>
                {
                    b.HasOne("ATKApplication.Models.EventForm1", "Event")
                        .WithOne("Concourse")
                        .HasForeignKey("ATKApplication.Models.Concourse", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.EventBase", b =>
                {
                    b.HasOne("ATKApplication.Models.Organization", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ATKApplication.Models.Theme", "Theme")
                        .WithMany("Events")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");

                    b.Navigation("Theme");
                });

            modelBuilder.Entity("ATKApplication.Models.FeedBack", b =>
                {
                    b.HasOne("ATKApplication.Models.EventForm1", "Event")
                        .WithOne("FeedBack")
                        .HasForeignKey("ATKApplication.Models.FeedBack", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.Finance", b =>
                {
                    b.HasOne("ATKApplication.Models.EventForm1", "Event")
                        .WithOne("Finance")
                        .HasForeignKey("ATKApplication.Models.Finance", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.InterAgencyCooperation", b =>
                {
                    b.HasOne("ATKApplication.Models.EventForm1", "Event")
                        .WithMany("InterAgencyCooperations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.MediaLink", b =>
                {
                    b.HasOne("ATKApplication.Models.EventBase", "Event")
                        .WithMany("MediaLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.Support", b =>
                {
                    b.HasOne("ATKApplication.Models.EventForm1", "Event")
                        .WithMany("Supports")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.Violation", b =>
                {
                    b.HasOne("ATKApplication.Models.EventForm3", "Event")
                        .WithMany("Violations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm1", b =>
                {
                    b.HasOne("ATKApplication.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Models.EventForm1", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm2", b =>
                {
                    b.HasOne("ATKApplication.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Models.EventForm2", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm3", b =>
                {
                    b.HasOne("ATKApplication.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Models.EventForm3", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm4", b =>
                {
                    b.HasOne("ATKApplication.Models.EventBase", null)
                        .WithOne()
                        .HasForeignKey("ATKApplication.Models.EventForm4", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ATKApplication.Models.EventBase", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("MediaLinks");
                });

            modelBuilder.Entity("ATKApplication.Models.Organization", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ATKApplication.Models.Theme", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm1", b =>
                {
                    b.Navigation("Audiences");

                    b.Navigation("Concourse");

                    b.Navigation("FeedBack");

                    b.Navigation("Finance");

                    b.Navigation("InterAgencyCooperations");

                    b.Navigation("Supports");
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm3", b =>
                {
                    b.Navigation("Violations");
                });

            modelBuilder.Entity("ATKApplication.Models.EventForm4", b =>
                {
                    b.Navigation("Agreements");
                });
#pragma warning restore 612, 618
        }
    }
}
